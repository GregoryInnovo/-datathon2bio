---
import Container from "./Container.astro";

const menuItems = [
  { href: "/", text: "Inicio" },
  { href: "/authors", text: "Autores" },
  {
    href: "search",
    text: "Buscar especies",
  },
  {
    href: "#",
    text: "Reinos",
    isDropdown: true,
    dropdownItems: [
      { href: "/animalae", text: "Animalae" },
      { href: "/plantae", text: "Plantae" },
      { href: "/fungi", text: "Fungi" },
    ],
  },
  {
    href: "explore",
    text: "Explora la biodiversidad de Colombia",
    isButton: true,
  },
];

// Add a new prop to determine the current page
const { currentPage = "index" } = Astro.props;

// Define the text for different pages
const pageTexts = {
  index:
    "Explora la maravillosa <strong>biodiversidad</strong><br />en <strong>Colombia</strong> y sus múltiples regiones",
  animalae: "Descubre la fascinante fauna de <strong>Colombia</strong>",
  plantae: "Admira la exuberante flora <strong>colombiana</strong>",
  fungi:
    "Explora el misterioso mundo de los hongos en <strong>Colombia</strong>",
  explore: `<ul class="text-center text-2xl text-green-900 dark:text-white">
    <li>Conoce la <strong>biodiversidad</strong> en <strong>Colombia</strong></li>
    <li>en sus múltiples regiones y especies</li>
  </ul>
  <br/>
  <p class="text-xl text-green-700 dark:text-green-200">
    Selecciona una categoría para: <br/> Conocer el número de especies en cada reino <br/> Filtrar por departamento
  </p>`,
  authors: "Conoce a los <strong>autores</strong> de este proyecto",
  search: `Utiliza nuestros filtros para encontrar <strong>cualquier especie</strong> `,
};

// Get the appropriate text based on the current page
const headerText = pageTexts[currentPage] || pageTexts.index;
---

<header>
  <nav class="z-1 w-full relative bg-forest">
    <Container>
      <div
        class="flex flex-wrap items-center justify-between py-2 gap-6 md:py-4 md:gap-0 relative"
      >
        <input
          aria-hidden="true"
          type="checkbox"
          name="toggle_nav"
          id="toggle_nav"
          class="hidden peer"
        />
        <div class="relative z-20 w-full flex justify-between lg:w-max md:px-0">
          <!-- Logo -->
          <a href="/" aria-label="logo" class="flex space-x-2 items-center">
            <span class="text-2xl font-bold text-green-900 dark:text-white"
              >Hyperion</span
            >
          </a>
          <!-- hamburger nav -->
          <div class="relative flex items-center lg:hidden max-h-10">
            <label
              role="button"
              for="toggle_nav"
              aria-label="humburger"
              id="hamburger"
              class="relative p-6 -mr-6"
            >
              <div
                aria-hidden="true"
                id="line"
                class="m-auto h-0.5 w-5 rounded bg-sky-900 dark:bg-gray-300 transition duration-300"
              >
              </div>
              <div
                aria-hidden="true"
                id="line2"
                class="m-auto mt-2 h-0.5 w-5 rounded bg-sky-900 dark:bg-gray-300 transition duration-300"
              >
              </div>
              <!-- aqui -->
            </label>
          </div>
        </div>
        <!-- items nav -->
        <div
          aria-hidden="true"
          class="fixed z-10 inset-0 h-screen w-screen bg-white/70 backdrop-blur-2xl origin-bottom scale-y-0 transition duration-500 peer-checked:origin-top peer-checked:scale-y-100 lg:hidden dark:bg-gray-900/70"
        >
        </div>
        <div
          class="flex-col z-20 flex-wrap gap-6 p-8 rounded-3xl border border-gray-100 bg-white shadow-2xl shadow-gray-600/10 justify-end w-full invisible opacity-0 translate-y-1 absolute top-full left-0 transition-all duration-300 scale-95 origin-top
                            lg:relative lg:scale-100 lg:peer-checked:translate-y-0 lg:translate-y-0 lg:flex lg:flex-row lg:items-center lg:gap-0 lg:p-0 lg:bg-transparent lg:w-9/12 lg:visible lg:opacity-100 lg:border-none
                            peer-checked:scale-100 peer-checked:opacity-100 peer-checked:visible lg:shadow-none
                            dark:shadow-none dark:bg-coffee dark:border-coffee"
        >
          <div
            class="text-gray-600 dark:text-gray-300 lg:pr-4 lg:w-auto w-full lg:pt-0"
          >
            <ul
              class="tracking-wide font-medium lg:text-sm flex-col flex lg:flex-row gap-6 lg:gap-0"
            >
              {
                menuItems.map((item) => (
                  <li class="relative group">
                    {item.isDropdown ? (
                      <>
                        <button class="flex items-center block md:px-4 transition hover:text-primary">
                          <span>{item.text}</span>
                          <svg
                            class="w-4 h-4 ml-1"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M19 9l-7 7-7-7"
                            />
                          </svg>
                        </button>
                        <div class="z-30 absolute left-0 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 ease-in-out">
                          <div
                            class="py-1"
                            role="menu"
                            aria-orientation="vertical"
                            aria-labelledby="options-menu"
                          >
                            {item.dropdownItems.map((dropdownItem) => (
                              <a
                                href={dropdownItem.href}
                                class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                                role="menuitem"
                              >
                                {dropdownItem.text}
                              </a>
                            ))}
                          </div>
                        </div>
                      </>
                    ) : !item.isButton ? (
                      <a
                        href={item.href}
                        class="block md:px-4 transition hover:text-primary"
                      >
                        <span>{item.text}</span>
                      </a>
                    ) : null}
                  </li>
                ))
              }
            </ul>
          </div>

          <div class="mt-12 lg:mt-0">
            {
              menuItems.map((item) =>
                item.isButton ? (
                  <a
                    href={item.href}
                    class="relative flex h-9 w-full items-center justify-center px-4 before:absolute before:inset-0 before:rounded-full before:bg-primary before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 sm:w-max"
                  >
                    <span class="relative text-sm font-semibold text-white">
                      {item.text}
                    </span>
                  </a>
                ) : null
              )
            }
          </div>
        </div>
      </div>
    </Container>

    <hr class="border-t border-gray-200 my-4 w-11/12 mx-auto" />

    <h3 class="text-center text-2xl text-green-900 dark:text-white pb-10">
      <Fragment set:html={headerText} />
    </h3>
  </nav>

  <style>
    #toggle_nav:checked ~ div #hamburger #line {
      @apply rotate-45 translate-y-1.5;
    }

    #toggle_nav:checked ~ div #hamburger #line2 {
      @apply -rotate-45 -translate-y-1;
    }

    .group:hover .absolute {
      display: block;
    }

    .group .absolute {
      display: none;
    }
  </style>

  <script>
    document.addEventListener("astro:page-load", () => {
      const dropdowns = document.querySelectorAll(".group");

      dropdowns.forEach((dropdown) => {
        let timeout;

        dropdown.addEventListener("mouseenter", () => {
          clearTimeout(timeout);
          dropdown.querySelector(".absolute").classList.add("block");
          dropdown.querySelector(".absolute").classList.remove("hidden");
        });

        dropdown.addEventListener("mouseleave", () => {
          timeout = setTimeout(() => {
            dropdown.querySelector(".absolute").classList.remove("block");
            dropdown.querySelector(".absolute").classList.add("hidden");
          }, 300); // 300ms delay before hiding
        });
      });
    });
  </script>
</header>
